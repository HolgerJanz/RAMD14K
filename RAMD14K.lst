mads 1.9.9
     1 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2 				; 
     3 				; RAMD14K - Ramdisk for all 64K Atari XLs 
     4
     5 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6 				;
     7 				; Special Patch program to allow 800XL owners to use
     8 				;   Atari DOS 2.5 with a small RamDisk.
     9 				;
    10 				; Theoretical size of disk is 16KBytes,
    11 				;   but 2KBytes are lost to the I/O registers
    12 				;   at $D000 to $D7FF and about 1KBytes
    13 				;   are lost to overhead.   Net is just
    14 				;   over 13KBytes.
    15 				;
    16 				;
    17 				; See COMPUTE! magazine, October 1986 issue,
    18 				;   for accompanying article:
    19 				;      INSIGHT: ATARI
    20 				;
    21 				; Program by Bill Wilkinson
    22 				;   released to the public domain
    23 				;
    24 				; Article is Copyright (c) 1986 by COMPUTE!
    25 				;   Contact COMPUTE! magazine for reprint
    26 				;   permission, etc.
    27 				;
    28 				; Extended and trimmed by Holger Janz, April 2019
    29 				;
    30
    31 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    32 				;
    33 				; Equates used to call CIO
    34 				;
    35
    36 = 00FE			XIO.FMTDD = 254 ; Format command
    37 = 0009			XIO.PRINT = 9   ; Print line
    38 = 0003			XIO.OPEN  = 3   ; Open
    39 = 000C			XIO.CLOSE = 12  ; Close
    40 = 0004			XIO.READ  = 4   ; Read
    41 = 0008			XIO.WRITE = 8   ; Write
    42 = 0007			XIO.GET   = 7   ; Get
    43 = 000B			XIO.PUT   = 11  ; Put
    44
    45 = 0340			IOCB        =  $0340    ; address of first IOCB
    46 = 0342			IOCB.CMD    = IOCB+2    ; where command goes in IOCB
    47 = 0344			IOCB.BUF    = IOCB+4    ; buffer (or name) address
    48 = 0348			IOCB.BUFLEN = IOCB+8    ; max buffer length address
    49 = 034A			IOCB.AUX1   = IOCB+10   ; Auxilliary byte 1
    50 = 034B			IOCB.AUX2   = IOCB+11   ; Auxilliary byte 2
    51
    52 = E456			CIOV = $E456            ; the classic location
    53
    54 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55 				;
    56 				; OS Equates
    57 				;
    58
    59 = 0012			RTCLOKH = $12
    60 = 0013			RTCLOKM = $13
    61 = 0014			RTCLOKL = $14
    62 = 0042			CRITIC  = $42
    63 = D40E			NMIEN   = $d40e
    64
    65 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66 				;
    67 				; Miscellaneous vital locations, equated
    68 				;   values, and routines used by DOS 2.5
    69
    70 = 1481			RAMIO    = $1481 ; start of RAMIO of DOS 2.5, end $14e7 = $66
    71 = 12CB			RAMSYNC  = $12CB ; routine which synchronizes RamDisk transfers
    72 = 1094			WRTVTOC  = $1094 ; write current VTOC back to disk
    73
    74 = 0045			VTOCPTR  = $45   ; pointer to VTOC in memory
    75 = 070A			DRVBYT   = $070a ; the infamous "1802" location
    76 = 07E0			INITDOS  = $07e0 ; same as DOS 2.0 and others
    77 = 07DF			FASTRAM  = $07DF ; flag:  + ==>> sync with VBI
    78 = D301			PIABPORT = $D301 ; master bank selector, etc.
    79
    80 				; DOS and DUP end pointer
    81 = 1D7C			NDOS     = $1D7C ; end of the system buffers and minidup
    82 = 3306			NDUP     = $3306 ; end of dup
    83
    84 = 153F			MEMDUP   = $153f ; just before Mini-DUP
    85 				; Location that says which drive MEM.SAV and DUP.SYS
    86 				; are located on (contains ATASCII character--
    87 				; not just a byte value)
    88
    89 = 0304			DISKBUF  = $0304 ; buffer address for read/write
    90 = 030A			DCBSEC   = $030A ; sector number in DCB
    91 = 0043			ZTEMP1   = $43   ; zero page temporary loc'n
    92 = 008B			E.NAK    = $8B   ; "NAK" error code from "drive"
    93
    94 = 0168			VTOCSEC = $168   ; sector number of VTOC
    95 = 0002			DVDOTYP = 2      ; type in VTOC for DOS 2.5
    96 = 0069			DVMAXSC = 128-16-1-3-3 ; 128 sectors in 16KBytes,
    97 				;         less 16 sectors for 2KB I/O "hole"
    98 				;         less 1 sector for VTOC
    99 				;         less 3 sectors for shortened directory
   100 				;         less 3 sectors for BOOT (useless but needed)
   101 				; (all this to find max # of sectors on disk)
   102
   103 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   104 				;
   105 				; Addresses of subroutines that we must alter
   106 				;
   107 = 148D			PATCH.RAMIO   = $148D ; RamDisk "I/O" routine
   108 = 12DE			PATCH.SETBANK = $12DE ; sets PIA to select proper bank
   109
   110 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   111 				;
   112 				; Patch to RAMIO:
   113 				;
   114 				; At the beginning of RAMIO, DOS 2.5 validates
   115 				;   the sector number to be sure it gets a valid
   116 				;   bank number
   117 				;
   118 				; If the bank number is bad, the Y-register
   119 				;   is given an error code indicating the
   120 				;   "disk" returned a "NAK" code.
   121 				;
   122 				; We patch in where the bank number is being
   123 				;   checked...it used to be checked via
   124 				;   a "CMP #4" but now we have a smaller "DISK".
   125 				;
   126 				    org PATCH.RAMIO
   127 FFFF> 148D-149D> C9 03	    CMP #3      ; sector must be in banks 0,1,2
   128 148F 90 04		    BCC SECOK   ; it is...assume it is okay
   129 1491 28			    PLP         ; needed to clean up stack
   130 1492 A0 8B		    LDY #E.NAK  ; too bad...give error
   131 1494 60			    RTS         ; used to be "BNE" to a RTS...dumb!
   132 1495			SECOK
   133 1495 20 CB 12		    JSR RAMSYNC ; synchronize and select bank
   134 1498 A5 43		    LDA ZTEMP1  ; get sector # times 2
   135 149A 4A			    LSR         ; now sector #
   136 149B 4A			    LSR         ; now sector # divided by 2
   137 149C 09 C0		    ORA #$C0    ; ensure address is in range ($C000-$FFFF)
   138 				; rest of code is okay!
   139
   140 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   141 				;
   142 				; Patch to SETBANK:
   143 				;
   144 				; The entire routine is replaced
   145 				;
   146 				; ENTER:  A-register = 0,1,2,3,4
   147 				;         If 4, then Main Memory is needed (ROMs)
   148 				;         Else, RAM is needed.
   149
   150 149E			    org PATCH.SETBANK
   151 12DE-12EB> 6A		    ROR          ; If A-register was 4 on entry...
   152 12DF 6A			    ROR          ; ...then these 3 ROR's...
   153 12E0 6A			    ROR          ; ...will set the carry 
   154 12E1 08			    PHP          ; so save the carry for a nonce
   155 12E2 AD 01 D3		    LDA PIABPORT ; and get current bank select info
   156 12E5 4A			    LSR          ; strip it of its LSBit
   157 12E6 28			    PLP          ; recover the carry...
   158 12E7 2A			    ROL          ; ...and carry becomes ROM select!!!
   159 12E8 8D 01 D3		    STA PIABPORT ; changes RAM to ROM or v.v.
   160 12EB 60			    RTS          ; saved a byte, actually!
   161
   162
   163 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   164 				; 
   165 				; Start
   166 				;
   167 				; Up until now, we have just patched DOS 2.5.
   168 				;
   169 				; Now, we must do several steps:
   170 				;
   171 				;  1. Reinitialize DOS
   172 				;  2. FORMAT the RamDisk
   173 				;  3. Alter the VTOC
   174 				;  4. Copy DUP.SYS
   175 				;  5. Create MEM.SAV
   176 				;
   177 				; Step 3 is necessary because DOS 2.5's
   178 				;   FORMAT routine assumes (A) that a disk
   179 				;   is large enough that the VTOC and
   180 				;   DIRECTORY can occupy sectors $168 to
   181 				;   $170 and (B) that (except for the boot
   182 				;   sectors and the VTOC and DIRECTORY)
   183 				;   available sector are continuous from
   184 				;   1 to the max sector number.
   185 				;   We set bits to zero in the VTOC to
   186 				;   inform DOS 2.5 that the corresponding
   187 				;   sectors are not really there!
   188
   189 12EC			        org $4000 
   190 4000			start                   ; Start of code
   191 				; start message
   192 4000-42A8> A2 7E		        ldx #<msg.start
   193 4002 A0 41		        ldy #>msg.start
   194 4004 A9 26		        lda #msg.start.end-msg.start
   195 4006 20 46 42		        jsr print
   196 				; start setup
   197 4009 A2 A4		        ldx #<msg.setup
   198 400B A0 41		        ldy #>msg.setup
   199 400D A9 13		        lda #msg.setup.end-msg.setup
   200 400F 20 46 42		        jsr print        
   201 				; add drive to drive list
   202 4012 A9 00		        lda #$00        ; set flag to say we need
   203 4014 8D DF 07		        sta FASTRAM     ; synchronized transfers
   204 				; activate RAMDISK at D8:
   205 4017 AD 0A 07		        lda DRVBYT      ; to active drives...
   206 401A 09 80		        ora #$80        ; ...include this drive
   207 401C 8D 0A 07		        sta DRVBYT      ; and update the mask
   208 401F 20 E0 07		        jsr INITDOS     ; including the drive table,
   209 				                        ; alloc buffer, etc.
   210 				; check for preformat (maybe there is already a ram disk)
   211 4022 20 13 42		        jsr check.vtoc
   212 4025 98			        tya
   213 4026 D0 2B		        bne prepare.ramdisk ; no ram disk
   214 				; there seems to be already a ramdisk
   215 				; check file name DUP.SYS set to D8:
   216 4028 A9 38		        lda #'8'
   217 402A 8D F3 41		        sta file.dup.NAME+1
   218 				; check for DUP.SYS on D8:
   219 402D A2 70		        ldx #$70
   220 402F A9 03		        lda #XIO.OPEN   
   221 4031 9D 42 03		        sta IOCB.CMD,X
   222 4034 A9 04		        lda #XIO.READ
   223 4036 9D 4A 03		        sta IOCB.AUX1,X
   224 4039 A9 F2		        lda #<file.dup.name
   225 403B 9D 44 03		        sta IOCB.BUF,X
   226 403E A9 41		        lda #>file.dup.name
   227 4040 9D 45 03		        sta IOCB.BUF+1,X
   228 4043 20 56 E4		        jsr CIOV
   229 4046 30 0A		        bmi dup.notfound
   230 4048 20 08 42		        jsr close
   231 404B 30 05		        bmi dup.notfound
   232 				; switch to D8: for MEM.SAV and DUP.SYS
   233 404D A9 38		        lda #'8'
   234 404F 8D 3F 15		        sta MEMDUP     ; set MEM.SAV and DUP.SYS drive
   235 				; finish 
   236 4052			dup.notfound
   237 4052 60			        rts             ; OK and we are done!
   238
   239 4053			prepare.ramdisk
   240 				; *** (1) FORMAT
   241 4053 A2 B7		        ldx #<msg.format
   242 4055 A0 41		        ldy #>msg.format
   243 4057 A9 0F		        lda #msg.format.end-msg.format
   244 4059 20 46 42		        jsr print
   245 				; format
   246 405C A2 70		        ldx #$70        ; we will use channel 7 for this
   247 405E A9 FE		        lda #XIO.FMTDD  ; the format command
   248 4060 9D 42 03		        sta IOCB.CMD,X  ; is first item on agenda!
   249 4063 A9 EE		        lda #<drv.name  ; LSB of address of drive name
   250 4065 9D 44 03		        sta IOCB.BUF,X  ; to IOCB
   251 4068 A9 41		        lda #>drv.name  ; then MSB
   252 406A 9D 45 03		        sta IOCB.BUF+1,X ; also to IOCB
   253 406D 20 56 E4		        jsr CIOV        ; call CIO to FORMAT the disk
   254 4070 30 2F		        bmi oops1       ; but we can't handle an error! (do nothing)
   255 				; okay...time to patch the VTOC
   256 4072 A0 4A		        ldy #SIZE.RVTOC
   257 4074			loop
   258 4074 B9 5F 42		        lda NEW.RVTOC,Y ; get a byte of modified VTOC
   259 4077 91 45		        sta (VTOCPTR),Y ; and put it into system VTOC
   260 4079 88			        dey         ; more to do?
   261 407A 10 F8		        bpl loop    ; yep
   262 407C 20 94 10		        jsr WRTVTOC ; so write out the modified VTOC
   263
   264 				;*** (2) COPY DUP.SYS TO D8:
   265 407F A2 C6		        ldx #<msg.copy
   266 4081 A0 41		        ldy #>msg.copy
   267 4083 A9 0D		        lda #msg.copy.end-msg.copy
   268 4085 20 46 42		        jsr print
   269 				; start copy of DUP.SYS
   270 4088 A2 70		        ldx #$70
   271 408A A9 03		        lda #XIO.OPEN
   272 408C 9D 42 03		        sta IOCB.CMD,X
   273 408F A9 04		        lda #XIO.READ
   274 4091 9D 4A 03		        sta IOCB.AUX1,X
   275 4094 A9 F2		        lda #<file.dup.name
   276 4096 9D 44 03		        sta IOCB.BUF,X
   277 4099 A9 41		        lda #>file.dup.name
   278 409B 9D 45 03		        sta IOCB.BUF+1,X
   279 409E 20 56 E4		        jsr CIOV
   280 40A1			oops1
   281 40A1 30 1E		        bmi oops2           ;NO DUP(?)
   282 				; read it into buffer
   283 40A3 A2 70		        ldx #$70
   284 40A5 A9 07		        lda #XIO.GET
   285 40A7 9D 42 03		        sta IOCB.CMD,X
   286 40AA A9 06		        lda #<file.dup.size
   287 40AC 9D 48 03		        sta IOCB.BUFLEN,X
   288 40AF A9 14		        lda #>file.dup.size
   289 40B1 9D 49 03		        sta IOCB.BUFLEN+1,X
   290 40B4 A9 AA		        lda #<file.dup.buffer
   291 40B6 9D 44 03		        sta IOCB.BUF,X
   292 40B9 A9 42		        lda #>file.dup.buffer
   293 40BB 9D 45 03		        sta IOCB.BUF+1,X
   294 40BE 20 56 E4		        jsr CIOV
   295 40C1			oops2
   296 40C1 30 23		        bmi oops3
   297 40C3 20 08 42		        jsr close
   298 40C6 30 1E		        bmi oops3
   299 				; file name DUP.SYS set to D8:
   300 40C8 A9 38		        lda #'8' ;
   301 40CA 8D F3 41		        sta file.dup.NAME+1
   302 				; now open for write
   303 40CD A2 70		        ldx #$70
   304 40CF A9 03		        lda #XIO.OPEN
   305 40D1 9D 42 03		        sta IOCB.CMD,X
   306 40D4 A9 08		        lda #XIO.WRITE
   307 40D6 9D 4A 03		        sta IOCB.AUX1,X
   308 40D9 A9 F2		        lda #<file.dup.name
   309 40DB 9D 44 03		        sta IOCB.BUF,X
   310 40DE A9 41		        lda #>file.dup.name
   311 40E0 9D 45 03		        sta IOCB.BUF+1,X
   312 40E3 20 56 E4		        jsr  CIOV
   313 40E6			oops3
   314 40E6 30 1E		        bmi  oops4
   315 				; write dup.sys to D8:
   316 40E8 A2 70		        ldx #$70
   317 40EA A9 0B		        lda #XIO.PUT
   318 40EC 9D 42 03		        sta IOCB.CMD,X
   319 40EF A9 06		        lda #<file.dup.size
   320 40F1 9D 48 03		        sta IOCB.BUFLEN,X
   321 40F4 A9 14		        lda #>file.dup.size
   322 40F6 9D 49 03		        sta IOCB.BUFLEN+1,X
   323 40F9 A9 AA		        lda #<file.dup.buffer
   324 40FB 9D 44 03		        sta IOCB.BUF,X
   325 40FE A9 42		        lda #>file.dup.buffer
   326 4100 9D 45 03		        sta IOCB.BUF+1,X
   327 4103 20 56 E4		        jsr CIOV
   328 4106			OOPS4
   329 4106 30 2C		        bmi  OOPS5
   330 				; close
   331 4108 20 08 42		        jsr close
   332 410B 30 27		        bmi  OOPS5
   333
   334 				; only and only if format and copy OK, 
   335 				; switch to D8: for MEM.SAV and DUP.SYS
   336 410D A9 38		        lda #'8'
   337 410F 8D 3F 15		        sta MEMDUP     ; set MEM.SAV and DUP.SYS drive
   338 				        
   339 				;*** (3) CREATE MEM.SAV FILE
   340 4112 A2 D3		        ldx #<msg.create
   341 4114 A0 41		        ldy #>msg.create
   342 4116 A9 0F		        lda #msg.create.end-msg.create
   343 4118 20 46 42		        jsr print
   344 				; start copy of DUP.SYS
   345 411B A2 70		        ldx #$70
   346 411D A9 03		        lda #XIO.OPEN
   347 411F 9D 42 03		        sta IOCB.CMD,X
   348 4122 A9 08		        lda #XIO.WRITE
   349 4124 9D 4A 03		        sta IOCB.AUX1,X
   350 4127 A9 FD		        lda #<file.mem.name
   351 4129 9D 44 03		        sta IOCB.BUF,X
   352 412C A9 41		        lda #>file.mem.name
   353 412E 9D 45 03		        sta IOCB.BUF+1,X
   354 4131 20 56 E4		        jsr CIOV
   355 4134			OOPS5
   356 4134 30 1E		        bmi oops6
   357 				; write mem.sav to d8:
   358 4136 A2 70		        ldx #$70
   359 4138 A9 0B		        lda #XIO.PUT
   360 413A 9D 42 03		        sta IOCB.CMD,X
   361 413D A9 8A		        lda #<file.mem.size
   362 413F 9D 48 03		        sta IOCB.BUFLEN,X
   363 4142 A9 15		        lda #>file.mem.size
   364 4144 9D 49 03		        sta IOCB.BUFLEN+1,X
   365 4147 A9 7C		        lda #<file.mem.buffer
   366 4149 9D 44 03		        sta IOCB.BUF,X
   367 414C A9 1D		        lda #>file.mem.buffer
   368 414E 9D 45 03		        sta IOCB.BUF+1,X
   369 4151 20 56 E4		        jsr CIOV
   370 4154			OOPS6
   371 4154 30 06		        bmi  oops7
   372 				; close channel
   373 4156 20 08 42		        jsr close
   374 4159 30 01		        bmi oops7
   375
   376 415B 60			        rts         ; OK and we are done!
   377
   378 415C			oops7
   379 				; set error code in message
   380 415C 98			        tya
   381 415D 38			        sec 
   382 415E E9 64		        sbc #100    ; error nums always are 1xx dec
   383 4160 A2 2F		        ldx #'0'-1  ; convert tens
   384 4162			count.tens
   385 4162 E8			        inx 
   386 4163 38			        sec 
   387 4164 E9 0A		        sbc #10
   388 4166 10 FA		        bpl count.tens ; the easy (slow) way
   389 4168 18			        clc
   390 4169 69 3A		        adc #10+'0'
   391 416B 8E EB 41		        stx msg.error.code
   392 416E 8D EC 41		        sta msg.error.code+1
   393 				; error message
   394 4171 A2 E2		        ldx #<msg.error
   395 4173 A0 41		        ldy #>msg.error
   396 4175 A9 0C		        lda #msg.error.end-msg.error
   397 4177 20 46 42		        jsr print
   398 				; close channel, just in case
   399 417A 20 08 42		        jsr close
   400
   401 417D 60			        rts         ; ERROR and we are done!
   402
   403 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   404 				;
   405 				; Messages
   406 				;
   407
   408 417E			msg.start
   409 417E 52 41 4D 44 31 34 +         .byte 'RAMD14K FOR ATARI DOS II VERSION '
   410 419F A0 B2 AE B5 A0	        .byte $a0,$0b2,$ae,$b5,$a0 ; invers _2.5_
   411 41A4			msg.start.end
   412
   413 41A4			msg.setup
   414 41A4 53 45 54 20 55 50 +         .byte 'SET UP RAMDISK D8:', $9b
   415 41B7			msg.setup.end
   416
   417 41B7			msg.format
   418 41B7 46 4F 52 4D 41 54 +         .byte 'FORMAT RAMDISK', $9b
   419 41C6			msg.format.end
   420
   421 41C6			msg.copy
   422 41C6 43 4F 50 59 20 44 +         .byte 'COPY DUP.SYS', $9b
   423 41D3			msg.copy.end
   424
   425 41D3			msg.create
   426 41D3 43 52 45 41 54 45 +         .byte 'CREATE MEM.SAV', $9b
   427 41E2			msg.create.end
   428
   429 41E2			msg.error
   430 41E2 45 52 52 4F 52 2D +         .byte 'ERROR-  1' ; error code always >128
   431 41EB			msg.error.code
   432 41EB 30 31 9B		        .byte '01',$9b
   433 41EE			msg.error.end
   434
   435 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   436 				;
   437 				; A string to hold drive name for XIO command
   438 				;
   439
   440 41EE			drv.name
   441 41EE 44 38 3A 9B		        .byte 'D8:',$9b  
   442 				        
   443 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   444 				;
   445 				; File names
   446 				;
   447
   448 41F2			file.dup.name
   449 41F2 44 31 3A 44 55 50 +         .byte 'D1:DUP.SYS',$9b
   450 = 1406			file.dup.size   = 5126
   451 = 42AA			file.dup.buffer = BUFFER
   452
   453 41FD			file.mem.name
   454 41FD 44 38 3A 4D 45 4D +         .byte 'D8:MEM.SAV',$9b
   455 = 158A			file.mem.size   = NDUP-NDOS
   456 = 1D7C			file.mem.buffer = NDOS
   457
   458 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   459 				;
   460 				; Close
   461 				;
   462
   463 4208			close ; close channel in X
   464 4208 A2 70		        ldx #$70
   465 420A A9 0C		        lda #XIO.CLOSE
   466 420C 9D 42 03		        sta IOCB.CMD,X
   467 420F 20 56 E4		        jsr CIOV
   468 4212 60			        rts
   469
   470 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   471 				;
   472 				; Check VTOC sector for pre formating
   473 				;
   474 				; return     Y=0   -> preformated
   475 				;            Y=1-3 -> wrong format
   476 				;
   477
   478 4213			check.vtoc ; Check VTOC sector
   479 				; set DCBSEC and DISKBUF
   480 4213 A9 68		        lda #<VTOCSEC
   481 4215 8D 0A 03		        sta DCBSEC
   482 4218 A9 01		        lda #>VTOCSEC
   483 421A 8D 0B 03		        sta DCBSEC+1
   484
   485 421D A9 AA		        lda #<BUFFER
   486 421F 8D 04 03		        sta DISKBUF
   487 4222 A9 42		        lda #>BUFFER
   488 4224 8D 05 03		        sta DISKBUF+1
   489 				; call RAMIONEW
   490 4227 18			        clc             ; read
   491 4228 20 81 14		        jsr RAMIO
   492 				; check first three bytes
   493 422B A0 03		        ldy #$03
   494 				        
   495 422D AD AA 42		        lda BUFFER
   496 4230 C9 02		        cmp #DVDOTYP
   497 4232 D0 11		        bne check.vtoc.end
   498 4234 88			        dey
   499
   500 4235 AD AB 42		        lda BUFFER+1
   501 4238 C9 69		        cmp #<DVMAXSC
   502 423A D0 09		        bne check.vtoc.end
   503 423C 88			        dey
   504
   505 423D AD AC 42		        lda BUFFER+2
   506 4240 C9 00		        cmp #>DVMAXSC
   507 4242 D0 01		        bne check.vtoc.end
   508 4244 88			        dey
   509
   510 4245			check.vtoc.end
   511 4245 60			        rts
   512
   513 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   514 				; 
   515 				; Print Message
   516 				;
   517 				; IN    X,Y    low, high byte of address to message
   518 				;        A    length of message
   519
   520 4246			print    ;print message
   521 4246 8D 48 03		        sta IOCB.BUFLEN
   522 4249 A9 00		        lda #$00
   523 424B 8D 49 03		        sta IOCB.BUFLEN+1
   524 424E 8E 44 03		        stx IOCB.BUF
   525 4251 8C 45 03		        sty IOCB.BUF+1
   526 4254 A9 0B		        lda #XIO.PUT
   527 4256 8D 42 03		        sta IOCB.CMD
   528 4259 A2 00		        ldx #$00
   529 425B 20 56 E4		        jsr CIOV
   530 425E 60			        rts
   531
   532 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   533 				;
   534 				;  New VTOC layout for 14KB RamDisk"
   535 				;
   536 				; Following are 74 bytes which define the appearance
   537 				;   of the VTOC for our 14KB RamDisk
   538 				;
   539 				; Some sneakies to observe:
   540 				;   even though we only use sector numbers
   541 				;   from $01 to $7F, we mark $68 through
   542 				;   $6B as being in use...this is because
   543 				;   our bank select routine maps sectos
   544 				;   $168 through $16B to the same memory
   545 				;   locations as those containing $68-$6B.
   546 				;   $168 is the VTOC, as is standard with
   547 				;   all DOS 2 versions, and $169 to $16B
   548 				;   are the directory.   Note that $169 to
   549 				;   $170 are normally used for directory,
   550 				;   but we have opted for a shortened directory
   551 				;   in order to give more file space...
   552 				;   our directory still allows 24 files...
   553 				;   surely more than enough for what is now
   554 				;   a 13KB RamDisk.
   555 				;
   556 425F			NEW.RVTOC
   557 425F 02			    .BYTE DVDOTYP ; DOS "2" family
   558 4260 69 00		    .WORD DVMAXSC ; max sector count
   559 4262 69 00		    .WORD DVMAXSC ; ditto...but this is "available" sectors
   560 4264 00 00 00 00 00	    .BYTE 0,0,0,0,0 ; 5 dummy bytes
   561 4269 0F			    .BYTE $0F   ; sectors 0,1,2,3 in use
   562 				    ;           4-7 available
   563 426A FF FF FF		    .BYTE $FF,$FF,$FF ; sectors 8-$1f available
   564 				    ;           which uses memory: $C000 to $CFFF
   565 426D 00 00		    .BYTE 0,0   ; sectors $20-$2F
   566 				    ;           were $D000 to $D7FF, but that
   567 				    ;           is I/O area!!
   568 426F FF FF		    .BYTE $FF,$FF ; sectors $30-$3f
   569 				    ;           memory $D800 to $DFFF
   570 4271 FF FF FF FF		    .BYTE $FF,$FF,$FF,$FF ; sectors $40-$5F
   571 				    ;           memory $E000 to $EFFF
   572 4275 FF			    .BYTE $FF   ; sectors $60-$67
   573 4276 0F			    .BYTE $0F   ; sectors $68-$6B marked as in use
   574 				    ;           because $168 to $16F are mapped to this
   575 				    ;           same bank, and we have chosen to allow
   576 				    ;           up to 24 files in the RamDisk
   577 				    ;           so we need 4 "holes" for the
   578 				    ;           VTOC and 3 directory sectors
   579 4277 FF FF		    .BYTE $FF,$FF ; sectors $70-$7F
   580 				    ;           sectors $60-$7F = memory $F000-$FFFF
   581 4279 80			    .BYTE $80   ; sector $80 is same as sector $00...
   582 				    ;           ...at memory location $C000..
   583 				    ;           ...but sector $00 is not used, so we
   584 				    ;           ...CAN use sector $80!!
   585 427A 00 00 00 00 00 00 +     .BYTE 0,0,0,0,0,0,0
   586 4281 00 00 00 00 00 00 +     .BYTE 0,0,0,0,0,0,0,0 ; to sector $FF
   587 4289 00 00 00 00 00 00 +     .BYTE 0,0,0,0,0,0,0,0
   588 4291 00 00 00 00 00 00 +     .BYTE 0,0,0,0,0,0,0,0 ; to sector $17F
   589 4299 00 00 00 00 00 00 +     .BYTE 0,0,0,0,0,0,0,0
   590 42A1 00 00 00 00 00 00 +     .BYTE 0,0,0,0,0,0,0,0 ; to sector $1FF ...
   591 				    ;           end of normal RamDisk
   592 = 004A			SIZE.RVTOC = *-NEW.RVTOC
   593
   594 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   595 				; 
   596 				; Buffer for copy
   597
   598 = 42AA			BUFFER  =  *+1
   599
   600
   601 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   602 				; 
   603 				; Run address
   604 02E0-02E1> 00 40		        run start
